{"version":3,"sources":["factories/ShipFactory.js","factories/BoardFactory.js","factories/PlayerFactory.js","factories/CpuFactory.js","reducers/boardReducer.js","store/Store.js","containers/UserBoard.js","actions/boardActions.js","containers/CpuBoard.js","containers/ShipsRemainingPlayer.js","containers/ShipsRemainingCpu.js","containers/Announcements.js","containers/GameEnd.js","App.js","index.js"],"names":["Ship","length","name","health","shipDisplay","Array","fill","direction","i","hit","getName","getHealth","changeDirection","getDirection","isSunk","Board","gameBoard","availableSquares","keys","shipArray","cpuDirection","cardinals","down","up","left","right","cardinalArray","nextLoc","remIndex","generateHit","shipName","randomLoc","Math","floor","random","loc","splice","key","includes","push","cardDirection","position","value","locInCardinal","cardinalLoc","indexOf","currentLoc","newCardArray","placeShips","selectedPart","parseInt","lastCol","firstCol","z","isValid","pass","Player","playerBoard","getDirections","changeDirections","cpu","ship","generateShips","forEach","hitRegister","console","log","_","require","boardReducer","state","action","tempState","cloneDeep","tempCpu","tempPlayer","player","tempStatus","statusDisplay","tempGameEnd","tempWon","type","index","tempObj","payload","gameState","cpuShips","Carrier","Battleship","Destroyer","Submarine","PatrolBoat","playerShips","whoseTurn","gameEnd","whoWon","shipDirection","tempCpuObj","tempPlayerObj","createStore","connect","dispatch","placeShip","resetBoard","gameStart","props","selectedShip","undefined","shipPart","e","target","id","slice","onDragStart","className","onDrop","onDragOver","preventDefault","map","square","uniqid","onClick","draggable","onMouseDown","hitCpu","hitPlayer","registerHit","setTimeout","disabled","turnDisplay","gameOver","App","store","Store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8f90f91.chunk.js","sourcesContent":["\nconst Ship=(length,name)=>{\n    let health=length;\n    let shipDisplay=new Array(length).fill(0);\n    let direction='Horizontal';\n\n    for(let i=0; i<shipDisplay.length; i++){\n        shipDisplay[i]=name + ' ' + i;\n    }\n\n    function hit(){\n        health-=1;\n    }\n    function isSunk(){\n        return health===0;\n    }\n    function getHealth(){\n        return health;\n    }\n    function changeDirection(){\n        direction = direction==='Horizontal' ? 'Vertical' : 'Horizontal';\n    }\n    function getDirection(){\n        return direction;\n    }\n    function getName(){\n        return name;\n    }\n    return {hit, shipDisplay, length, getName, getHealth,changeDirection,getDirection, isSunk,name}\n}\n\nexport default Ship;","import Ship from './ShipFactory'\nconst Board = () => {\n    let gameBoard = new Array(100).fill('empty');\n    let availableSquares = [...Array(100).keys()];\n    let shipArray=[\n        Ship(5,'Carrier'),\n        Ship(4,'Battleship'),\n        Ship(3,'Destroyer'),\n        Ship(3,'Submarine'),\n        Ship(2,'PatrolBoat')\n    ];\n    let cpuDirection='';\n    let cardinals={\n        down:10,\n        up:-10,\n        left:-1,\n        right:1,\n    }\n    let cardinalArray=[];\n    let nextLoc=0;\n    let remIndex=0;\n\n    function placeShips(length,name,direction,loc,selectedPart){\n        loc=parseInt(loc);\n        if(isValid(length,direction,loc,selectedPart))\n        {\n            if(direction==='Horizontal'){\n                loc=loc-parseInt(selectedPart);\n                for(let i=loc; i<length+loc; i++){\n                    gameBoard[i]=name;\n                }\n                return {pass:true, gameBoard}\n            }\n            else{\n                loc=loc-parseInt(selectedPart*10);\n                for(let z=loc; z<length*10+loc; z+=10){\n                    gameBoard[z]=name;\n                }\n                return {pass:true, gameBoard};\n            }\n        }\n        else{\n            return {pass:false, gameBoard};\n        }\n\n    }\n    function isValid(length,direction,loc,selectedPart){\n        loc=parseInt(loc);\n        let lastCol=false;\n        let firstCol=false;\n        if(direction === 'Horizontal'){\n            loc=loc-parseInt(selectedPart);\n            if(loc<0){return false;}\n            if(loc+length-1>=gameBoard.length){return false}\n            for(let i=loc; i<loc+length; i++){\n                if(!(gameBoard[i]==='empty')){return false}\n\n                if(i%10===9){lastCol=true};\n                if(i%10===0){firstCol=true};\n\n                if(lastCol && firstCol){return false};\n            }\n        }\n        else if(direction === 'Vertical'){\n            loc=loc-parseInt(selectedPart)*10;\n            if(loc<0){return false;}\n\n            if(loc+(length-1)*10>=gameBoard.length){ return false; }\n\n            else{\n                for(let z=loc; z<length*10+loc; z+=10){\n                    if(!(gameBoard[z]==='empty')){return false;}\n                }\n            } \n        }\n        return true; \n    }\n    function generateHit(){\n        let shipName=''\n\n        //If the cpu has not yet hit a ship it will continue to randomize locations until it registers a hit\n        if(cardinalArray.length===0 && cpuDirection===''){\n            let randomLoc=Math.floor(Math.random()*availableSquares.length);\n            let loc=availableSquares[randomLoc];\n            availableSquares.splice(randomLoc,1);\n            if(!(gameBoard[loc]==='empty')){\n                for(let key in cardinals){ //INCASE ANYTHING MESSES UP ITS BECAUSE OF THIS MODULUS BECAUSE IT WORKED PERFECT BEFORE IT\n                    if(availableSquares.includes(loc+cardinals[key]) && !((loc+cardinals[key])%10===0)){\n                        cardinalArray.push({\n                            cardDirection:key,\n                            position:(loc+cardinals[key]),\n                            value:cardinals[key],\n                        });\n                    }\n                }\n                shipName=gameBoard[loc];\n                for(let i=0; i<shipArray.length; i++){\n                    if(shipArray[i].getName()===shipName){\n                        shipArray[i].hit();\n                        gameBoard[loc]=gameBoard[loc]+' disabled';\n                        if(shipArray[i].isSunk()){\n                            return{\n                                gameBoard:gameBoard,\n                                shipName:shipName,\n                            }\n                        }\n                    }\n        \n                }\n            }\n            else{\n                gameBoard[loc]=gameBoard[loc]+' disabled';\n                return {gameBoard:gameBoard};\n            }\n        }\n        //Once a hit on a ship is registered, the cpu will continue to search the surrounding cardinal direction to determine its future direction\n        else{\n            if(cpuDirection===''){   \n                let locInCardinal=Math.floor(Math.random()*cardinalArray.length)\n                let cardinalLoc=cardinalArray[locInCardinal].position;\n\n                if(!(gameBoard[cardinalLoc]==='empty')){\n                    cpuDirection={ \n                        direction:cardinalArray[locInCardinal].cardDirection,\n                        value:cardinals[cardinalArray[locInCardinal].cardDirection],\n                        currentLoc:cardinalLoc,\n                    };\n                    cardinalArray.splice(locInCardinal,1);\n                    remIndex=availableSquares.indexOf(cardinalLoc)\n                    availableSquares.splice(remIndex,1)\n                    shipName=gameBoard[cardinalLoc]\n                    \n\n                    for(let i=0; i<shipArray.length; i++){\n                        if(shipArray[i].getName()===shipName){\n                            shipArray[i].hit();\n                            gameBoard[cardinalLoc]=gameBoard[cardinalLoc]+' disabled';\n                            if(shipArray[i].isSunk()){\n                                cpuDirection='';\n                                // cardinalArray=[];\n                                return{\n                                    gameBoard:gameBoard,\n                                    shipName:shipName,\n                                }\n                            }\n                        }\n            \n                    }\n                }\n                else{\n                    remIndex=(availableSquares.indexOf(cardinalLoc))\n                    availableSquares.splice(remIndex,1)\n                    cardinalArray.splice(locInCardinal,1);\n                    gameBoard[cardinalLoc]=gameBoard[cardinalLoc]+' disabled';\n                    return {gameBoard:gameBoard};\n                }\n            }\n            //end of branch no direction\n            else{\n                nextLoc=cpuDirection.value+cpuDirection.currentLoc;\n                if(gameBoard[nextLoc].includes('disabled')){\n                    // let newCardArray=[];\n                    // for(let i=0; i<cardinalArray.length; i++){\n                    //     if(cardinalArray[i].value===(cpuDirection.value*-1)){\n                    //         newCardArray.push(cardinalArray[i]);\n                    //         break;\n                    //     }\n                    // }\n                    // cardinalArray=newCardArray;\n\n                    let locInCardinal=Math.floor(Math.random()*cardinalArray.length)\n                    let cardinalLoc=cardinalArray[locInCardinal].position;\n    \n                    if(!(gameBoard[cardinalLoc]==='empty')){\n                        cpuDirection={ \n                            direction:cardinalArray[locInCardinal].cardDirection,\n                            value:cardinals[cardinalArray[locInCardinal].cardDirection],\n                            currentLoc:cardinalLoc,\n                        };\n                        cardinalArray.splice(locInCardinal,1);\n                        remIndex=availableSquares.indexOf(cardinalLoc)\n                        availableSquares.splice(remIndex,1)\n                        shipName=gameBoard[cardinalLoc]\n                        \n    \n                        for(let i=0; i<shipArray.length; i++){\n                            if(shipArray[i].getName()===shipName){\n                                shipArray[i].hit();\n                                gameBoard[cardinalLoc]=gameBoard[cardinalLoc]+' disabled';\n                                if(shipArray[i].isSunk()){\n                                    cpuDirection='';\n                                    // cardinalArray=[];\n                                    return{\n                                        gameBoard:gameBoard,\n                                        shipName:shipName,\n                                    }\n                                }\n                            }\n                \n                        }\n                    }\n                    else{\n                        remIndex=(availableSquares.indexOf(cardinalLoc))\n                        availableSquares.splice(remIndex,1)\n                        cardinalArray.splice(locInCardinal,1);\n                        gameBoard[cardinalLoc]=gameBoard[cardinalLoc]+' disabled';\n                        return {gameBoard:gameBoard};\n                    }\n                }\n                else if(gameBoard[nextLoc]==='empty'){\n                    gameBoard[nextLoc]=gameBoard[nextLoc]+' disabled';\n                    remIndex=(availableSquares.indexOf(nextLoc))\n                    availableSquares.splice(remIndex,1)\n                    let newCardArray=[];\n                    for(let i=0; i<cardinalArray.length; i++){\n                        if(cardinalArray[i].value===(cpuDirection.value*-1)){\n                            newCardArray.push(cardinalArray[i]);\n                            break;\n                        }\n                    }\n                    cardinalArray=newCardArray;\n                    cpuDirection=''\n                    return {gameBoard:gameBoard};\n                }\n                else{\n                    cpuDirection.currentLoc=nextLoc;\n                    shipName=gameBoard[nextLoc];\n                    gameBoard[nextLoc]=gameBoard[nextLoc]+' disabled';\n                    remIndex=(availableSquares.indexOf(nextLoc))\n                    availableSquares.splice(remIndex,1)\n                    for(let i=0; i<shipArray.length; i++){\n                        if(shipArray[i].getName()===shipName){\n                            shipArray[i].hit();\n                            if(shipArray[i].isSunk()){\n                                cpuDirection='';\n                                // cardinalArray=[];\n                                return{\n                                    gameBoard:gameBoard,\n                                    shipName:shipName,\n                                }\n                            }\n                        }\n        \n                }\n\n                }\n            }\n        }\n        return {gameBoard:gameBoard};\n        \n\n\n    }\n\n    return {gameBoard,generateHit,placeShips}\n}\n\nexport default Board;","import Board from './BoardFactory';\nimport Ship from './ShipFactory';\n\nconst Player = () => {\n    let playerBoard=Board();\n    let shipArray=[\n        Ship(5,'Carrier'),\n        Ship(4,'Battleship'),\n        Ship(3,'Destroyer'),\n        Ship(3,'Submarine'),\n        Ship(2,'PatrolBoat')\n    ];\n\n    function getDirections(){\n        return shipArray[0].getDirection();\n    }\n\n    function changeDirections(){\n        for(let i=0; i<shipArray.length; i++){\n            shipArray[i].changeDirection();\n        }\n    }\n\n    //Maybe need function to turn shipArray into placedShips\n\n    return {getDirections, changeDirections, playerBoard,shipArray};\n}\n\nexport default Player;","import Ship from '../factories/ShipFactory';\n\nconst cpu=()=>{\n    let gameBoard=new Array(100).fill('empty');\n    let shipArray=[\n        Ship(5,'Carrier'),\n        Ship(4,'Battleship'),\n        Ship(3,'Destroyer'),\n        Ship(3,'Submarine'),\n        Ship(2,'PatrolBoat')\n    ];\n\n    function generateShips(){\n        shipArray.forEach(ship=>{\n            let loc=Math.floor(Math.random()*gameBoard.length);\n            placeShips(ship,loc)\n        })\n        return gameBoard;\n    }\n\n    function placeShips(ship, loc){\n        if(Math.floor(Math.random()*2)===1){ship.changeDirection();}\n        \n        if(isValid(ship.getDirection(),ship.length,loc))\n        {\n            if(ship.getDirection()==='Horizontal'){\n                for(let i=loc; i<ship.length+loc; i++){\n                    gameBoard[i]=ship.name;\n                }\n            }\n            else{\n                for(let z=loc; z<ship.length*10+loc; z+=10){\n                    gameBoard[z]=ship.name;\n                }\n            }\n        }\n        else\n        {\n            placeShips(ship,Math.floor(Math.random()*gameBoard.length));\n        }\n    }\n    function isValid(direction,length,loc){\n        let lastCol=false;\n        let firstCol=false;\n        if(direction === 'Horizontal'){\n            if(loc+length>=gameBoard.length){return false}\n            for(let i=loc; i<loc+length; i++){\n                if(!(gameBoard[i]==='empty')){return false}\n                if(i%10===9){lastCol=true};\n                if(i%10===0){firstCol=true};\n\n                if(lastCol && firstCol){return false};\n            }\n        }\n        else if(direction === 'Vertical'){\n            if(loc+length*10>=gameBoard.length){ return false; }\n            else{\n                for(let z=loc; z<length*10+loc; z+=10){\n                    if(!(gameBoard[z]==='empty')){return false;}\n                }\n            } \n        }\n        return true;  \n    }\n\n    function hitRegister(loc){\n        let shipName='';\n        if(!(gameBoard[loc]==='empty')){\n            shipName=gameBoard[loc];\n            for(let i=0; i<shipArray.length; i++){\n                if(shipArray[i].getName()===shipName){\n                    shipArray[i].hit();\n                    if(shipArray[i].isSunk()){\n                        console.log('sunk' , shipName)\n                        gameBoard[loc]=gameBoard[loc]+' disabled';\n                        return{\n                            gameBoard:gameBoard,\n                            shipName:shipName,\n                        }\n                    }\n                }\n    \n            }\n        }\n        gameBoard[loc]=gameBoard[loc]+' disabled';\n        return {gameBoard:gameBoard};\n    }\n\n    // function getCurrentHealth(){\n    //     let health=0;\n    //     for(let i=0; i<shipArray.length; i++){\n    //         health+=shipArray[i].getHealth();\n    //     }\n    //     return health;\n\n    // }\n\n    return {shipArray, gameBoard, generateShips, hitRegister};\n}\n\nexport default cpu;","import Player from '../factories/PlayerFactory';\nimport cpu from '../factories/CpuFactory';\nconst _ = require('lodash')\n\n\nconst boardReducer = (state,action) =>{\n    let tempState=_.cloneDeep(state);\n    let tempCpu=_.cloneDeep(state.cpu);\n    let tempPlayer=_.cloneDeep(state.player);\n    let tempStatus=_.cloneDeep(state.statusDisplay);\n    let tempGameEnd=false;\n    let tempWon='';\n    switch(action.type){\n        case 'PLACE_SHIP':\n            let index=-1;\n            tempState=_.cloneDeep(state);\n            let tempObj=tempState.player.playerBoard.placeShips(\n                action.payload.length,\n                action.payload.name,\n                action.payload.direction,\n                action.payload.loc,\n                action.payload.selectedPart,\n            )\n            tempState.player.playerBoard.gameBoard=tempObj.gameBoard;\n            \n            if(tempObj.pass===true){\n                for(let i=0; i<tempState.player.shipArray.length; i++){\n                    if(tempState.player.shipArray[i].getName()===action.payload.name){\n                        index=i;\n                        tempState.player.shipArray.splice(index,1)\n                    }\n                }\n            }\n            state=tempState;\n            break;\n        case 'RESET_BOARD':\n            state={        \n                player:Player(),\n                gameState:false,\n                cpu:cpu(),\n                cpuShips:{\n                    Carrier:false,\n                    Battleship:false,\n                    Destroyer:false,\n                    Submarine:false,\n                    PatrolBoat:false,\n                },\n                playerShips:{\n                    Carrier:false,\n                    Battleship:false,\n                    Destroyer:false,\n                    Submarine:false,\n                    PatrolBoat:false,\n                },\n                whoseTurn:'player',\n                statusDisplay:'Place your ships and press start game to begin',\n                gameEnd:false,\n                whoWon:'',\n                shipDirection:'Horizontal',\n            }\n            break;\n        case 'CHANGE_DIRECTION':\n            if(state.shipDirection==='Horizontal'){state={...state,shipDirection:'Vertical'}}\n            else{state={...state,shipDirection:'Horizontal'}}\n            break;\n        case 'START_GAME':\n            tempCpu=_.cloneDeep(state.cpu);\n            tempCpu.gameBoard=tempCpu.generateShips();\n            state={...state,gameState:true,cpu:tempCpu,statusDisplay:''};\n            break;\n        case 'CPU_HIT':\n            if(state.gameEnd===true){\n                return state;\n            }\n            tempStatus='';\n            let cpuShips=_.cloneDeep(state.cpuShips)\n            tempCpu=_.cloneDeep(state.cpu);\n            let tempCpuObj=tempCpu.hitRegister(action.payload.loc);\n            tempCpu.gameBoard=tempCpuObj.gameBoard\n\n            if('shipName' in tempCpuObj){\n                cpuShips[tempCpuObj.shipName]=true;\n                tempStatus='Player has sunk Cpu\\'s ' +tempCpuObj.shipName;\n                tempGameEnd=true;\n                for(let i in cpuShips)\n                {\n\n                    if(cpuShips[i]===false)\n                    {\n                        tempGameEnd=false;\n                        break;\n                    }\n                }\n            }\n            tempWon=tempGameEnd===true ? 'PLAYER' : '';\n            state={\n                ...state,\n                cpu:tempCpu,\n                cpuShips:cpuShips,\n                whoseTurn:'cpu',\n                statusDisplay:tempStatus,\n                gameEnd:tempGameEnd,\n                whoWon:tempWon\n            };\n\n            break;\n        case 'PLAYER_HIT':\n            tempStatus='';\n            if(state.gameEnd===true){\n                return state;\n            }\n            let playerShips=_.cloneDeep(state.playerShips)\n            tempPlayer=_.cloneDeep(state.player);\n            let tempPlayerObj=tempPlayer.playerBoard.generateHit();\n            tempPlayer.playerBoard.gameBoard=tempPlayerObj.gameBoard;\n\n            if('shipName' in tempPlayerObj){\n                playerShips[tempPlayerObj.shipName]=true;\n                tempStatus='Cpu has sunk Player\\'s ' +tempPlayerObj.shipName;\n                tempGameEnd=true;\n                for(let i in playerShips)\n                {\n                    if(playerShips[i]===false)\n                    {\n                        tempGameEnd=false;\n                    }\n                }\n            }\n            tempWon=tempGameEnd===true ? 'CPU' : '';\n            state={\n                ...state,\n                player:tempPlayer,\n                playerShips:playerShips,\n                whoseTurn:'player',\n                statusDisplay:tempStatus,\n                gameEnd:tempGameEnd,\n                whoWon:tempWon\n            }\n            break;\n        case 'GAME_OVER':\n            state={        \n                player:Player(),\n                gameState:false,\n                cpu:cpu(),\n                cpuShips:{\n                    Carrier:false,\n                    Battleship:false,\n                    Destroyer:false,\n                    Submarine:false,\n                    PatrolBoat:false,\n                },\n                playerShips:{\n                    Carrier:false,\n                    Battleship:false,\n                    Destroyer:false,\n                    Submarine:false,\n                    PatrolBoat:false,\n                },\n                whoseTurn:'player',\n                statusDisplay:'Place your ships and press start game to begin',\n                gameEnd:false,\n                whoWon:'',\n                shipDirection:'Horizontal',\n            }\n        default:\n            break;\n    }\n    return state;\n}\n\nexport default boardReducer;","import {createStore, applyMiddleware} from 'redux';\nimport Player from '../factories/PlayerFactory';\nimport boardReducer from '../reducers/boardReducer';\nimport logger from 'redux-logger';\nimport cpu from '../factories/CpuFactory'\n\nexport default createStore (\n    boardReducer,\n    {\n        player:Player(),\n        gameState:false,\n        cpu:cpu(),\n        cpuShips:{\n            Carrier:false,\n            Battleship:false,\n            Destroyer:false,\n            Submarine:false,\n            PatrolBoat:false,\n        },\n        playerShips:{\n            Carrier:false,\n            Battleship:false,\n            Destroyer:false,\n            Submarine:false,\n            PatrolBoat:false,\n        },\n        whoseTurn:'player',\n        statusDisplay:'Place your ships and press start game to begin',\n        gameEnd:false,\n        whoWon:'',\n        shipDirection:'Horizontal',\n    },\n    // applyMiddleware(logger),\n)\n\n","import React from 'react';\nimport {useState} from 'react';\nimport {connect} from 'react-redux';\nimport {placeShip,resetBoard,gameStart,changeDirection} from '../actions/boardActions';\nimport uniqid from 'uniqid'\n\nfunction UserBoard (props) {\n\n    let selectedShip=undefined;\n    let selectedPart=undefined;\n\n    //Change direction add to state\n\n    const shipPart=(e)=>{\n        selectedPart=e.target.id.slice(-1);\n    }\n    const onDragStart =(e)=>{\n        for(let i=0; i<props.player.shipArray.length; i++){\n            if(props.player.shipArray[i].getName()===e.target.id){\n                selectedShip=props.player.shipArray[i];\n            }\n        }\n    }\n    const onDrop=(e)=>{\n        props.placeShip(\n            selectedShip.length,\n            selectedShip.getName(),\n            selectedShip.getDirection(),\n            e.target.value,\n            selectedPart\n        )\n    }\n    const onDragOver=(e)=>{\n        e.preventDefault();\n    }\n    const containerDirection=(e)=>{\n        props.player.changeDirections();\n        props.changeDirection();\n\n    }\n    const boardReset=()=>{\n        props.resetBoard();\n    }\n    const startGame=()=>{\n        props.gameStart();\n\n    }\n    return(\n        <div className={props.gameState===true ? 'userBoardContainer' : 'userBoardContainer single'}>\n            <div>\n                <div className='boardTitle'>Player Waters</div>\n                <ul className='userBoard' onDrop={onDrop} onDragOver={onDragOver}>\n                    {props.player.playerBoard.gameBoard.map((square,index)=>{\n                        return(\n                            <button key={uniqid()} value={index} \n                            className={square==='empty' ? 'empty' : square}>\n                            </button>\n                        )\n                    })}\n                </ul>\n                <div className='buttonWrapper'>\n                    <button \n                            className={props.gameState===true ?'hidden' :'changeDirection' }\n                            onClick={props.player.shipArray.length===0 ? startGame : containerDirection}>\n                            {props.player.shipArray.length===0 ? 'Start Game' : 'Change Direction'}\n                    </button>\n                    <button className={props.gameState===true ?'hidden' :'resetBoard' } onClick={boardReset}>Reset Board</button>\n                </div>\n            </div>\n            <div className={props.gameState===true?'hidden':'allShipsContainer'}>\n                <div className={props.shipDirection==='Horizontal' ? 'shipContainer Horizontal' : 'shipContainer Vertical'}>\n                    {props.player.shipArray.map(ship=>{\n                        return(\n                            <div className={props.shipDirection==='Horizontal' ? 'ship Horizontal' : 'ship Vertical'}\n                            id={ship.getName()} draggable={true} key={uniqid()} onDragStart={onDragStart}>\n                                {ship.shipDisplay.map(square=>{\n                                    return (\n                                        <div key={uniqid()} id={square} className='shipSquare' onMouseDown={shipPart}>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        )\n                    })}\n                    \n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        player:state.player,\n        gameState:state.gameState,\n        shipDirection:state.shipDirection\n    }\n}\n\nconst mapDispatchToProps=dispatch=>{\n    return{\n        placeShip:(length,name,direction,loc,selectedPart)=>{\n            dispatch(placeShip(length,name,direction,loc,selectedPart));\n        },\n        resetBoard:()=>{\n            dispatch(resetBoard())\n        },\n        gameStart:()=>{\n            dispatch(gameStart())\n        },\n        changeDirection:()=>{\n            dispatch(changeDirection())\n        }\n    } \n};\nexport default connect(mapStateToProps,mapDispatchToProps)(UserBoard);","export function placeShip(length,name,direction,loc,selectedPart){\n    return {\n        type:'PLACE_SHIP',\n        payload:{\n            length,name,direction,loc,selectedPart\n        }\n    }\n}\n\nexport function resetBoard(){\n    return{\n        type:'RESET_BOARD',\n        payload:{}\n    }\n}\n\nexport function gameStart(){\n    return{\n        type:'START_GAME',\n        payload:{}\n    }\n}\n\nexport function hitCpu(loc){\n    return {\n        type:'CPU_HIT',\n        payload:{\n            loc,\n        }\n    }\n}\n\nexport function hitPlayer(){\n    return {\n        type:'PLAYER_HIT',\n        payload:{\n\n        }\n    }\n}\n\nexport function gameOver(){\n    return{\n        type:'GAME_OVER',\n        payload:{\n\n        }\n    }\n}\n\nexport function changeDirection(){\n    return{\n        type:'CHANGE_DIRECTION',\n        payload:{\n\n        }\n    }\n}","import React from 'react';\nimport {connect} from 'react-redux';\nimport uniqid from 'uniqid'\nimport {hitCpu,hitPlayer} from '../actions/boardActions'\n\nfunction CpuBoard (props) {\n\n    const registerHit = (e) => {\n        props.hitCpu(e.target.value);\n        setTimeout(()=>{\n            props.hitPlayer();\n        },1000)\n    }\n    return(\n        <div className={props.gameState===true ? 'userBoardContainer' : 'hidden'}>\n            <div>\n                <div className='boardTitle'>Enemy waters</div>\n                <ul className='userBoard'>\n                    {props.cpu.gameBoard.map((square,index)=>{\n                        return (\n                            <button  \n                                value={index} \n                                key={uniqid()} \n                                onClick={registerHit} \n                                className={square==='empty' ? 'empty' : square + ' cpu'}\n                                disabled={square.includes('disabled') || props.whoseTurn==='cpu'}>\n                            </button>\n                        )\n                    })}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        cpu:state.cpu,\n        gameState:state.gameState,\n        whoseTurn:state.whoseTurn\n    }\n}\n\nconst mapDispatchToProps=dispatch=>{\n    return{\n        hitCpu:(loc)=>{\n            dispatch(hitCpu(loc))\n        },\n        hitPlayer:()=>{\n            dispatch(hitPlayer())\n        }\n    } \n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(CpuBoard);","import React from 'react';\nimport {connect} from 'react-redux';\n\nfunction ShipsRemainingPlayer (props) {\n    return(\n        <div className={props.gameState===true ? 'playerRemaining' : 'hidden'}>\n            <div \n                className={props.playerShips.Battleship===true ? 'underline' : 'noDecoration'}>Battleship</div>\n            <div\n                className={props.playerShips.PatrolBoat===true ? 'underline' : 'noDecoration'}>PatrolBoat</div>\n            <div\n                className={props.playerShips.Submarine===true ? 'underline' : 'noDecoration'}>Submarine</div>\n            <div\n                className={props.playerShips.Destroyer===true ? 'underline' : 'noDecoration'}>Destroyer</div>\n            <div\n                className={props.playerShips.Carrier===true ? 'underline' : 'noDecoration'}>Carrier</div>\n        </div>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        playerShips:state.playerShips,\n        gameState:state.gameState\n    }\n}\n\nconst mapDispatchToProps=dispatch=>{\n    return{\n    } \n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ShipsRemainingPlayer);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nfunction ShipsRemainingCpu (props) {\n    return(\n        <div className={props.gameState===true ? 'cpuRemaining' : 'hidden'}>\n            <div \n                className={props.cpuShips.Battleship===true ? 'underline' : 'noDecoration'}>Battleship</div>\n            <div\n                className={props.cpuShips.PatrolBoat===true ? 'underline' : 'noDecoration'}>PatrolBoat</div>\n            <div\n                className={props.cpuShips.Submarine===true ? 'underline' : 'noDecoration'}>Submarine</div>\n            <div\n                className={props.cpuShips.Destroyer===true ? 'underline' : 'noDecoration'}>Destroyer</div>\n            <div\n                className={props.cpuShips.Carrier===true ? 'underline' : 'noDecoration'}>Carrier</div>\n        </div>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        cpuShips:state.cpuShips,\n        gameState:state.gameState\n    }\n}\n\nconst mapDispatchToProps=dispatch=>{\n    return{\n    } \n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ShipsRemainingCpu);\n","//A heading that announces turns and ships sunk\n//and eventually the player/cpu that won\n\nimport React from 'react'\nimport {connect} from 'react-redux';\n\nfunction Announcements (props) {\n    let turnDisplay=''\n    if(props.gameState===true){\n        turnDisplay=(props.whoseTurn==='player' ? 'Player\\'s turn' : 'Cpu\\'s Turn');\n    }\n    else{\n        turnDisplay='BATTLESHIP'\n    }\n    return(\n        <div className='announcementContainer'>\n            <div className='turnAnnouncement'>{turnDisplay}</div>\n            <div className='statusAnnouncement'>{props.statusDisplay}</div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        whoseTurn:state.whoseTurn,\n        statusDisplay:state.statusDisplay,\n        gameState:state.gameState,\n    }\n}\n\nconst mapDispatchToProps=dispatch=>{\n    return{\n    } \n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Announcements);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {gameOver} from '../actions/boardActions'\n\nfunction GameEnd(props){\n    const endGame = () =>{\n        props.gameOver();\n    }\n    return(\n        <div className={props.gameEnd===true ? 'gameOver' : 'hidden'}>\n            <div>\n                GAME OVER\n            </div>\n            <div>{props.whoWon} HAS WON</div>\n            <button onClick={endGame}>PLAY AGAIN</button>\n        </div>\n\n    )\n\n}\nconst mapStateToProps = state => {\n    return {\n        gameEnd:state.gameEnd,\n        whoWon:state.whoWon,\n    }\n}\n\nconst mapDispatchToProps=dispatch=>{\n    return{\n        gameOver:()=>{\n            dispatch(gameOver())\n        }\n    } \n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(GameEnd);","import {Provider} from 'react-redux';\nimport Store from './store/Store';\nimport UserBoard from './containers/UserBoard'\nimport CpuBoard from './containers/CpuBoard'\nimport ShipsRemainingPlayer from './containers/ShipsRemainingPlayer';\nimport ShipsRemainingCpu from './containers/ShipsRemainingCpu';\nimport Announcements from './containers/Announcements';\nimport GameEnd from './containers/GameEnd'\n\nfunction App() {\n  return (\n    <Provider store={Store}>\n      <Announcements></Announcements>\n      <div id='boardContainers'>\n        <ShipsRemainingPlayer/>\n        <UserBoard></UserBoard>\n        <CpuBoard></CpuBoard>\n        <ShipsRemainingCpu/>\n      </div>\n      <GameEnd/>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}